"Practica 7 (2) ?? lol";

"map";

fun simpleMap (F,nil) = nil
| simpleMap (F,x::xs) = F x::simpleMap(F,xs);

map;

"reduce";

exception ListaVacia;
fun reduce (F,nil) = raise ListaVacia
| reduce(F,[a]) = a
| reduce(F,x::xs) = F(x, reduce(F,xs));

"filter";
fun filter (P,nil) = nil
| filter(P,x::xs) = if P(x) then x::filter(P,xs) else filter(P,xs);

filter;

  "Ej 1: ";

  "a:"; 

fun los_cuadrados_reales x:real = x*x;

fun ej1a list = simpleMap(los_cuadrados_reales,list);

ej1a [2.3,1.5,3.0];

 "b";

fun los_enteros_reales x:int = x*x*x;

fun ej1b list = simpleMap(los_enteros_reales,list);

ej1b [2,1,3];

 "c";

fun borrar_negativos x:int = if x>0 then x else 0;

fun ej1c list = simpleMap(borrar_negativos,list);

ej1c [2,~3,4,~1];

 "d";

fun mas_uno x:int = x+1;

fun ej1d list = simpleMap(mas_uno,list);

fun ej1d list = map mas_uno list;

ej1d [2,~3,4,~1];

 "e";

"me da paja trabajar con ascii";

  "Ej 2: ";

 "a";

fun mayor (a,b) = if a > b then a else b;

fun ej2a lista = reduce(mayor,lista);

ej2a [3,4,1,7,12,24,1];

 "b";

fun menor (a,b) = if a < b then a else b;

fun ej2b lista = reduce(menor,lista);

 "c";

fun el_OR (a,b) = a orelse b;

fun ej2c lista = reduce(el_OR,lista);

ej2c [false,true,3>3,false];


  "Ej 3: ";

 "a";

fun may_0 (a) = a > 0;

fun ej3a list = filter(may_0,list);

ej3a [40,3,~3,~3,0,23,53];

 "b";

fun entre_1y2 (a) = a > 1.0 andalso a <2.0;

fun ej3b list = filter(entre_1y2,list);

ej3b [1.3,2.5,1.0,6.3,1.3,0.5,1.5];

 "c";

fun empiezacona (a) = hd(explode(a)) = #"a";

fun ej3c list = filter(empiezacona,list);

ej3c ["jolyne","anastasia","emporio","pucci","jotaro"];

 "d";

fun maslarg3 (a)= size(a) < 4;

fun ej3d list = filter(maslarg3,list);

ej3d ["poroto","D4C","sop","luc","ewsteban"];

  "Ej 4: ";

 "a";

fun suma (x,y) = x + y;

reduce(suma,[3,4,5,6,7,8]);

fun ej4a list n = n = reduce(suma,list);

ej4a [3,4,5,6,7,8] 32;

 "b";

fun elevara a 0 = 1
  | elevara a n = a * elevara a (n-1);

fun ej4b nil n = nil
  | ej4b (x::y) n = [elevara x n] @ ej4b y n;

ej4b [1,2,3,4,5] 2;

 "c";

fun elevara2 a = a*a; fun eldoble a = a*2; [elevara2,eldoble];

fun aplicarmucho nil a = nil
  | aplicarmucho (f::y) a = [f a] @ aplicarmucho y a;

aplicarmucho [elevara2,eldoble] 3;

  "Ej 5: ";

 "a";

fun cubosnumerales a = a * a * a;

fun suma (x,y) = x + y;

fun sumadeloscubos list = reduce(suma,simpleMap(cubosnumerales,list));

sumadeloscubos [1,2,3,4];

 "b";

fun longlist nil = 0
  | longlist (x::y) = 1 + longlist y;

fun may4 list = longlist list>4;

fun el_AND (a,b) = a andalso b;

fun longlists list = reduce(el_AND,simpleMap(may4,list));

longlists [[1,3,3,3,3],[3,1,2,3]];

 "c";

fun multiplicar (a,b) = a * b;

fun multiplicarall_espositivo list =  0 < reduce(multiplicar, list);

fun prod_positivo list = filter(multiplicarall_espositivo,list);

prod_positivo [[3,2],[0,2,3],[3,~2,3],[1]];
